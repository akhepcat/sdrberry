#pragma once
#include <cstdio>
#include <cassert>
#include <cmath>
#include <complex>
#include <liquid.h>
#include <vector>
#include <tuple>
#include <array>
#include "DataBuffer.h"
#include "Audiodefs.h"

#define NR_FFT_L 1024 //256
#define PI 3.14159265358979323846

const float sqrtHann[256] =
	{
		0, 0.01231966, 0.024637449, 0.036951499, 0.049259941, 0.061560906,
		0.073852527, 0.086132939, 0.098400278, 0.110652682, 0.122888291, 0.135105247, 0.147301698,
		0.159475791, 0.171625679, 0.183749518, 0.195845467, 0.207911691, 0.219946358, 0.231947641, 0.24391372,
		0.255842778, 0.267733003, 0.279582593, 0.291389747, 0.303152674, 0.314869589, 0.326538713, 0.338158275,
		0.349726511, 0.361241666, 0.372701992, 0.384105749, 0.395451207, 0.406736643, 0.417960345, 0.429120609,
		0.440215741, 0.451244057, 0.462203884, 0.473093557, 0.483911424, 0.494655843, 0.505325184, 0.515917826,
		0.526432163, 0.536866598, 0.547219547, 0.557489439, 0.567674716, 0.577773831, 0.587785252, 0.597707459,
		0.607538946, 0.617278221, 0.626923806, 0.636474236, 0.645928062, 0.65528385, 0.664540179, 0.673695644,
		0.682748855, 0.691698439, 0.700543038, 0.709281308, 0.717911923, 0.726433574, 0.734844967, 0.743144825,
		0.75133189, 0.759404917, 0.767362681, 0.775203976, 0.78292761, 0.790532412, 0.798017227, 0.805380919,
		0.812622371, 0.819740483, 0.826734175, 0.833602385, 0.840344072, 0.846958211, 0.853443799, 0.859799851,
		0.866025404, 0.872119511, 0.878081248, 0.88390971, 0.889604013, 0.895163291, 0.900586702, 0.905873422,
		0.911022649, 0.916033601, 0.920905518, 0.92563766, 0.930229309, 0.934679767, 0.938988361, 0.943154434,
		0.947177357, 0.951056516, 0.954791325, 0.958381215, 0.961825643, 0.965124085, 0.968276041, 0.971281032,
		0.974138602, 0.976848318, 0.979409768, 0.981822563, 0.984086337, 0.986200747, 0.988165472, 0.989980213,
		0.991644696, 0.993158666, 0.994521895, 0.995734176, 0.996795325, 0.99770518, 0.998463604, 0.999070481,
		0.99952572, 0.99982925, 0.999981027, 0.999981027, 0.99982925, 0.99952572, 0.999070481, 0.998463604,
		0.99770518, 0.996795325, 0.995734176, 0.994521895, 0.993158666, 0.991644696, 0.989980213, 0.988165472,
		0.986200747, 0.984086337, 0.981822563, 0.979409768, 0.976848318, 0.974138602, 0.971281032, 0.968276041,
		0.965124085, 0.961825643, 0.958381215, 0.954791325, 0.951056516, 0.947177357, 0.943154434, 0.938988361,
		0.934679767, 0.930229309, 0.92563766, 0.920905518, 0.916033601, 0.911022649, 0.905873422, 0.900586702,
		0.895163291, 0.889604013, 0.88390971, 0.878081248, 0.872119511, 0.866025404, 0.859799851, 0.853443799,
		0.846958211, 0.840344072, 0.833602385, 0.826734175, 0.819740483, 0.812622371, 0.805380919, 0.798017227,
		0.790532412, 0.78292761, 0.775203976, 0.767362681, 0.759404917, 0.75133189, 0.743144825, 0.734844967,
		0.726433574, 0.717911923, 0.709281308, 0.700543038, 0.691698439, 0.682748855, 0.673695644, 0.664540179,
		0.65528385, 0.645928062, 0.636474236, 0.626923806, 0.617278221, 0.607538946, 0.597707459, 0.587785252,
		0.577773831, 0.567674716, 0.557489439, 0.547219547, 0.536866598, 0.526432163, 0.515917826, 0.505325184,
		0.494655843, 0.483911424, 0.473093557, 0.462203884, 0.451244057, 0.440215741, 0.429120609, 0.417960345,
		0.406736643, 0.395451207, 0.384105749, 0.372701992, 0.361241666, 0.349726511, 0.338158275, 0.326538713,
		0.314869589, 0.303152674, 0.291389747, 0.279582593, 0.267733003, 0.255842778, 0.24391372, 0.231947641,
		0.219946358, 0.207911691, 0.195845467, 0.183749518, 0.171625679, 0.159475791, 0.147301698, 0.135105247,
		0.122888291, 0.110652682, 0.098400278, 0.086132939, 0.073852527, 0.061560906, 0.049259941, 0.036951499,
		0.024637449, 0.01231966, 0};

class SpectralNoiseReduction
{
  public:
	SpectralNoiseReduction(float pcmrate, tuple<float, float> bandwidth);
	void Process(const SampleVector &samples_in, SampleVector &samples_out);
	void SpectralNoiseReductionInit();

  private:
	float pslp[NR_FFT_L / 2];
	float xt[NR_FFT_L / 2];
	float xtr;
	float pre_power;
	float post_power;
	float power_ratio;
	int16_t NN;
	
	float ax;   //=0.8;       // ax=exp(-tinc/tax); % noise output smoothing factor
	float ap;   //=0.9;        // ap=exp(-tinc/tap); % noise output smoothing factor
	float xih1; // = 31.6;
	
	float xih1r ;
	float pfac ;
	uint8_t NR_init_counter;
	int NR_first_time_2;

	float NR_alpha = 0.95;

	const float tinc = 0.00533333; // frame time 5.3333ms
	const float tax = 0.0239;	  // noise output smoothing time constant = -tinc/ln(0.8)
	const float tap = 0.05062;	 // speech prob smoothing time constant = -tinc/ln(0.9) tinc = frame time (5.33ms)
	const float psthr = 0.99;	  // threshold for smoothed speech probability [0.99]
	const float pnsaf = 0.01;	  // noise probability safety value [0.01]
	const float asnr = 20;		   // active SNR in dB
	const float psini = 0.5;	   // initial speech probability [0.5]
	const float pspri = 0.5;	   // prior speech probability [0.5]
	float DF;
	float SampleRate;
	tuple<float, float> bandwidth;

	array<float, NR_FFT_L / 2> NR_last_sample_buffer_R;
	array<float, NR_FFT_L / 2> NR_last_sample_buffer_L;
	array<array<float, 2>, NR_FFT_L / 2> NR_Gts;
	array<float, NR_FFT_L / 2> NR_G;
	array<array<float, 2>, NR_FFT_L / 2> NR_Nest;
	array<float, NR_FFT_L / 2> NR_Hk_old;
	array<complex<float>, NR_FFT_L> NR_FFT_buffer;
	array<complex<float>, NR_FFT_L> NR_FFT_buffer1;
	array<float, NR_FFT_L> NR_last_iFFT_result;
	array<array<float, 3>, NR_FFT_L /2> NR_X;
	array<float, NR_FFT_L / 2> NR_SNR_prio;
	array<float, NR_FFT_L / 2> NR_SNR_post;
	array<float, NR_FFT_L / 2> NR_long_tone_gain;
};

extern SpectralNoiseReduction Noisesp;